/**
 * Given a query object, expand it into a set of operations that need to be
 * performed in order to fufill the query.
 *
 * For example if we have a join that needs to take place across two connections
 * or adapters then we will need to build up two operations and stage them so
 * that they run in the correct order.
 */

/**
 * Module Dependencies
 */

var _ = require('lodash');
var async = require('async');
var Cache = require('../cache');
var utils = require('../../utils/helpers');
var normalize = require('../../utils/normalize');
var hasOwnProperty = utils.object.hasOwnProperty;

/**
 * Operations Module
 *
 * @param {Object} context
 * @param {Object} criteria
 * @param {Object} parent
 */

var Operations = module.exports = function(context, criteria, parent) {

  // Build up an in-memory cache of the results
  this.cache = Cache()

  // Set context
  this.context = context;

  // Set criteria
  this.criteria = criteria;

  // Set parent
  this.parent = parent;

  // Hold a default value for pre-combined results (native joins)
  this.preCombined = false;

  // Seed the Cache
  this._seedCache();

  // Build Up Operations
  this.operations = this._buildOperations();

  return this;
};

